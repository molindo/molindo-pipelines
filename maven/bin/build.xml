<?xml version="1.0"?>
<!--
	Usage from other directory: ant -f ../buildtools/build.xml -Dbasedir=. help

	Prerequisites for usage:
	- parent SHOULD be latest molindo-private-pom
	- version MUST be in the form of *.*.9999-SNAPSHOT
	- <scm> MUST is propertly configured (including write access)
	- container-tags.txt SHOULD be in .gitignore
-->
<project name="Build config" default="help" xmlns:if="ant:if" xmlns:unless="ant:unless">

	<!-- optional and const parameters -->
	<property name="aws" value="aws" />
	<property name="mvn" value="mvn" />
	<property name="branch" value="master" />
	<property name="deleteProperties" value="true" />
	<property name="pushChanges" value="true" />
	<property name="defaultIncrementalVersion" value="9999" />
	<property name="defaultQualifier" value="SNAPSHOT" />
	<property name="defaultBuildtoolFilter" value="[Buildtool]" />
	<property name="containerTagsFileName" value="container-tags.txt" />

	<!-- usage -->
	<target name="help" description="print usage info">
		<echo message="ant -f ../buildtools/build.xml -Dbasedir=. dist" />
	</target>

	<!-- main CI task to be called by build environment -->
	<target name="dist" depends="initialize" description="build and deploy Maven project">
		<antcall target="buildDefault" />
		<antcall target="buildBranch" />
	</target>

	<!-- actions to be executed for master -->
	<target name="buildDefault" if="isDefaultBranch">
		<echo message="triggering CI build for default branch ${git.branch}" />

		<antcall target="setVersion">
			<param name="version" value="${build.version.release}" />
		</antcall>

		<antcall target="build" />

		<antcall target="writeContainerTags" />

		<antcall target="setVersion">
			<param name="version" value="${build.version.default}" />
		</antcall>

		<antcall target="tagVersion">
			<param name="version" value="${build.version.release}" />
		</antcall>

		<antcall target="updateAndPushDependencies" />

	</target>

	<!-- actions to be executed when operating within a development branch -->
	<target name="buildBranch" if="isFeatureBranch">
		<echo message="triggering CI build for feature branch ${git.branch}" />

		<antcall target="setVersion">
			<param name="version" value="${build.version.release}" />
		</antcall>

		<antcall target="build" />

		<antcall target="writeContainerTags" />

		<antcall target="setVersion">
			<param name="version" value="${build.version.default}" />
		</antcall>

	</target>

	<!-- load properties from POM -->
	<target name="properties">
		<tempfile property="build.properties" prefix="build" suffix=".properties" destDir="${java.io.tmpdir}" deleteonexit="${deleteProperties}" />

		<!-- write properties to ${build.properties} -->
		<exec executable="${mvn}" failonerror="true">
			<arg value="--batch-mode" />
			<arg value="--settings=settings.xml" />
			<arg value="-Ddeployment=true" />
			<arg value="-Dbuild.properties=${build.properties}" />
			<arg value="initialize" />
			<arg value="properties:write-project-properties" />
		</exec>

		<!-- load properties from ${build.properties} -->
		<echo message="using build properties from ${build.properties}" />
		<loadproperties srcFile="${build.properties}" />
	</target>

	<!-- check and set required properties -->
	<target name="initialize" depends="properties">

		<!-- {default,git}.branch can be provided by pom.xml or from CLI, default is master -->
		<property name="default.branch" value="master" />
		<property name="git.branch" value="master" />

		<!-- determine if we're working on a default branch -->
		<condition property="isDefaultBranch">
			<equals arg1="${default.branch}" arg2="${git.branch}" />
		</condition>

		<!-- check if we're working on a feature branch -->
		<condition property="isFeatureBranch">
			<!-- we assume that everything that isn't default is a feature branch -->
			<isfalse value="${isDefaultBranch}" />
		</condition>

		<!-- we're either on a default branch or a feature branch -->
		<fail message="build must be either default or feature">
			<condition>
				<not>
					<xor>
						<istrue value="${isDefaultBranch}" />
						<istrue value="${isFeatureBranch}" />
					</xor>
				</not>
			</condition>
		</fail>

		<!-- check if we're building a docker image -->
		<available property="isServiceBuild" file="src/main/docker/Dockerfile" unless:set="${isServiceBuild}" />
		<echo message="this is a service build" if:set="isServiceBuild" />
		<echo message="this is a library build" unless:set="isServiceBuild" />

		<!-- get incrementalVersion from DynamoDB -->
		<condition property="isFetchIncrementalVersion">
			<and>
				<istrue value="${isDefaultBranch}" />
				<not>
					<isset property="incrementalVersion" />
				</not>
			</and>
		</condition>
		<property name="incrementalVersionKey" value="${project.groupId}:${project.artifactId}:${build.majorVersion}.${build.minorVersion}" />
		<exec executable="${aws}" failonerror="true" outputproperty="incrementalVersion" error="/tmp/ant-error.log" if:set="isFetchIncrementalVersion">
			<arg value="--region=eu-central-1" />
			<arg value="dynamodb" />
			<arg value="update-item" />
			<arg value="--table-name=pipelines-versions" />
			<arg value="--return-values=ALL_NEW" />
			<arg value="--key={&quot;artifact&quot;: {&quot;S&quot;: &quot;${incrementalVersionKey}&quot;}}" />
			<arg value="--expression-attribute-names={&quot;#V&quot;:&quot;version&quot;}" />
			<arg value="--expression-attribute-values={&quot;:one&quot;: {&quot;N&quot;: &quot;1&quot;}}" />
			<arg value="--update-expression=ADD #V :one" />
			<arg value="--query=Attributes.version.N" />
			<arg value="--output=text" />
		</exec>
		<echo message="fetched incrementalVersion ${incrementalVersion} for ${incrementalVersionKey}" if:set="isFetchIncrementalVersion" />
		<echo message="use predefined incrementalVersion ${incrementalVersion} for ${incrementalVersionKey}" unless:set="isFetchIncrementalVersion" />

		<!-- check for required properties -->
		<fail message="incrementalVersion not set for default build">
			<condition>
				<and>
					<istrue value="${isDefaultBranch}" />
					<not>
						<isset property="incrementalVersion" />
					</not>
				</and>
			</condition>
		</fail>

		<!-- set properties -->
		<property name="build.version.default" value="${build.majorVersion}.${build.minorVersion}.${defaultIncrementalVersion}-${defaultQualifier}" />
		<property name="build.version.current" value="${build.majorVersion}.${build.minorVersion}.${build.incrementalVersion}-${build.qualifier}" />

		<!-- set default branch properties -->
		<condition property="build.version.release" value="${build.majorVersion}.${build.minorVersion}.${incrementalVersion}">
			<istrue value="${isDefaultBranch}" />
		</condition>
		<condition property="build.version.tag" value="${build.version.release}">
			<istrue value="${isDefaultBranch}" />
		</condition>

		<!-- set feature branch properties -->
		<condition property="build.version.release" value="${build.majorVersion}.${build.minorVersion}.${defaultIncrementalVersion}-${git.branch}-${defaultQualifier}">
			<istrue value="${isFeatureBranch}" />
		</condition>
		<condition property="build.version.tag" value="${build.majorVersion}.${build.minorVersion}.${defaultIncrementalVersion}-${git.branch}-${incrementalVersion}">
			<istrue value="${isFeatureBranch}" />
		</condition>

		<!-- check for expected version format -->
		<fail message="version must be equal to x.x.${defaultIncrementalVersion}-${defaultQualifier} but was ${build.version.current}">
			<condition>
				<not>
					<equals arg1="${build.version.default}" arg2="${build.version.current}" casesensitive="true" trim="false" />
				</not>
			</condition>
		</fail>

		<!-- debug output -->
		<echoproperties />
		<echo message="releasing version ${build.version.release} from ${build.version.default}" />
	</target>

	<!-- deploy or verify Maven artifact -->
	<target name="build" description="deploy or verify Maven project">
		<antcall target="deploy" />
		<antcall target="verify" />
	</target>

	<!-- deploy Maven artifact -->
	<target name="deploy" unless="isServiceBuild">
		<echo message="deploying maven artifact" />
		<exec executable="${mvn}" failonerror="true">
			<arg value="--batch-mode" />
			<arg value="--settings=settings.xml" />
			<arg value="-Ddeployment=true" />
			<arg value="--update-snapshots" />
			<arg value="clean" />
			<arg value="deploy" />
			<arg value="at.molindo:molindo-maven-fetchdeployed:1.0.6:fetch" />
		</exec>
	</target>

	<!-- verify Maven artifact -->
	<target name="verify" if="isServiceBuild">
		<echo message="deploying maven artifact" />
		<exec executable="${mvn}" failonerror="true">
			<arg value="--batch-mode" />
			<arg value="--settings=settings.xml" />
			<arg value="-Ddeployment=true" />
			<arg value="--update-snapshots" />
			<arg value="clean" />
			<arg value="verify" />
		</exec>
	</target>

	<!-- tag and set version ${version} -->
	<target name="tagVersion">
		<echo message="tagging version ${version}" />
		<exec executable="${mvn}" failonerror="true">
			<arg value="--batch-mode" />
			<arg value="--settings=settings.xml" />
			<arg value="scm:check-local-modification" />
			<arg value="-Dscm.checkLocalModification.skip=${isFeatureBranch}" />
			<arg value="scm:tag" />
			<arg value="-DpushChanges=${pushChanges}" />
			<arg value="-DdeveloperConnectionUrl=scm:git:${git.remote.origin.url}" if:set="git.remote.origin.url" />
			<arg value="-Dtag=${version}" />
		</exec>
	</target>

	<!-- set version ${version} -->
	<target name="setVersion">
		<echo message="setting POM version ${version}" />
		<exec executable="${mvn}" failonerror="true">
			<arg value="--batch-mode" />
			<arg value="--settings=settings.xml" />
			<arg value="versions:set" />
			<arg value="-DnewVersion=${version}" />
		</exec>
	</target>

	<!-- check if there are updated libraries we're referencing and push the update -->
	<target name="updateAndPushDependencies">
		<exec executable="${mvn}" failonerror="true">
			<arg value="--batch-mode" />
			<arg value="--settings=settings.xml" />
			<arg value="scm:check-local-modification" />
			<arg value="versions:update-parent" />
		</exec>
		<exec executable="${mvn}" failonerror="true">
			<arg value="--batch-mode" />
			<arg value="--settings=settings.xml" />
			<arg value="versions:use-latest-releases" />
		</exec>
		<exec executable="${mvn}" failonerror="true">
			<arg value="--batch-mode" />
			<arg value="--settings=settings.xml" />
			<arg value="scm:checkin" />
			<arg value="-Dmessage=${defaultBuildtoolFilter} updated internal dependencies" />
			<arg value="-DpushChanges=${pushChanges}" />
			<arg value="-DdeveloperConnectionUrl=scm:git:${git.remote.origin.url}" if:set="git.remote.origin.url" />
		</exec>
	</target>

	<!-- write container tags -->
	<target name="writeContainerTags" if="isServiceBuild">
		<condition property="build.latest.tag" value="latest" else="${git.branch}">
			<istrue id="isDefaultBranch" />
		</condition>
		<echo file="${containerTagsFileName}" append="false">${project.artifactId}:${build.version.tag}${line.separator}${project.artifactId}:${build.latest.tag}${line.separator}</echo>
	</target>

</project>
